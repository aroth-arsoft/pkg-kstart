#!/usr/bin/perl -w
#
# Tests for k5start with AFS.
#
# Written by Russ Allbery <rra@stanford.edu>
# Copyright 2008 Board of Trustees, Leland Stanford Jr. University
#
# See LICENSE for licensing terms.

BEGIN { our $total = 16 }
use Test::More tests => $total;

# Load our test utility programs.
require '@abs_top_builddir@/tests/libtest.pl';

# The full path to the newly-built k5start client.
our $K5START = '@abs_top_builddir@/k5start';

# The path to our data directory, which contains the keytab to use to test.
our $DATA = '@abs_top_builddir@/tests/data';

# The path to a shell script that just prints something out.
our $FAKE_AKLOG = '@abs_top_srcdir@/tests/data/fake-aklog';

SKIP: {
    skip 'no keytab configuration', $total unless -f "$DATA/test.keytab";
    skip 'no current AFS tokens', $total unless tokens();
    my $principal = contents ("$DATA/test.principal");

    # Don't overwrite the user's ticket cache.
    $ENV{KRB5CCNAME} = 'krb5cc_test';

    # Basic token test.
    unlink 'krb5cc_test';
    my ($out, $err, $status)
        = command ($K5START, '-tqUf', "$DATA/test.keytab", '--', 'tokens');
    skip 'not built with AFS support', $total
        if ($err eq
            "k5start: cannot create PAG: AFS support is not available\n");
    is ($status, 0, 'k5start -t succeeds');
    is ($err, '', ' with no errors');
    like ($out, qr/^(User\'s \([^\)]+\) )?[Tt]okens for /m,
          ' and the right output');
    my ($default, $service) = klist ();
    is ($default, undef, ' and the normal ticket cache is untouched');

    # Set the token program to something that doesn't obtain tokens.
    # Everything should still work, but we should have no tokens.
    $ENV{AKLOG} = '/bin/true';
    ($out, $err, $status)
        = command ($K5START, '-tqUf', "$DATA/test.keytab", '--', 'tokens');
    is ($status, 0, 'k5start -t succeeds with no aklog');
    is ($err, '', ' with no errors');
    unlike ($out, qr/^(User\'s \([^\)]+\) )?[Tt]okens for /m,
            ' and we have no tokens');
    delete $ENV{AKLOG};

    # Make sure that we run the right aklog program.
    $ENV{AKLOG} = $FAKE_AKLOG;
    ($out, $err, $status)
        = command ($K5START, '-tqUf', "$DATA/test.keytab", '--', 'true');
    is ($status, 0, 'k5start -t succeeds with fake aklog');
    is ($err, '', ' with no errors');
    is ($out, "Running fake aklog\n", ' and we ran the fake aklog');
    delete $ENV{AKLOG};

    # AKLOG should override KINIT_PROG.
    $ENV{KINIT_PROG} = $FAKE_AKLOG;
    $ENV{AKLOG} = '/bin/true';
    ($out, $err, $status)
        = command ($K5START, '-tqUf', "$DATA/test.keytab", '--', 'true');
    is ($status, 0, 'k5start -t succeeds with /bin/true aklog');
    is ($err, '', ' with no errors');
    is ($out, '', ' and we did not run KINIT_PROG');
    delete $ENV{AKLOG};
    delete $ENV{KINIT_PROG};

    # KINIT_PROG should still work.
    $ENV{KINIT_PROG} = $FAKE_AKLOG;
    ($out, $err, $status)
        = command ($K5START, '-tqUf', "$DATA/test.keytab", '--', 'true');
    is ($status, 0, 'k5start -t succeeds with KINIT_PROG');
    is ($err, '', ' with no errors');
    is ($out, "Running fake aklog\n", ' and we ran the fake aklog');
    delete $ENV{KINIT_PROG};
}
