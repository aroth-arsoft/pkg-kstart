#!/usr/bin/perl
#
# Test spelling in POD documentation.
#
# Written by Russ Allbery <rra@stanford.edu>
# Copyright 2008 Board of Trustees, Leland Stanford Jr. University
#
# See LICENSE for licensing terms.

use Test::More;

my @files = qw(k4start.pod k5start.pod krenew.pod);
my $total = scalar (@files);
plan tests => $total;

SKIP: {
    eval 'use Test::Pod 1.00';
    skip 'Test::Pod 1.00 required for testing POD', $total if $@;
    eval 'use Pod::Spell';
    skip 'Pod::Spell required to test POD spelling', $total if $@;

    # Find a useful spell-checking program.
    my @spell;
    for my $dir (split ':', $ENV{PATH}) {
        if (-x "$dir/ispell") {
            @spell = ("$dir/ispell", qw(-d american -l -p /dev/null));
        }
        last if @spell;
    }
    skip 'ispell required to test POD spelling', $total unless @spell;

    # Run the test, one for each POD file.
    $| = 1;
  SKIP:
    for my $file (@files) {
        my $child = open (CHILD, '-|');
        if (not defined $child) {
            die "Cannot fork: $!\n";
        } elsif ($child == 0) {
            my $pid = open (SPELL, '|-', @spell)
                or die "Cannot run @spell: $!\n";
            open (POD, '<', "@abs_top_srcdir@/$file")
                or die "Cannot open $pod: $!\n";
            my $parser = Pod::Spell->new;
            $parser->parse_from_filehandle (\*POD, \*SPELL);
            close POD;
            close SPELL;
            exit ($? >> 8);
        } else {
            my @words = <CHILD>;
            close CHILD;
            if ($? != 0) {
                skip "@spell failed", 1;
            } else {
                @words = map { s/^\s+//; s/\s+$//; $_ } @words;
                is ("@words", '', "Spelling of $file");
            }
        }
    }
}
